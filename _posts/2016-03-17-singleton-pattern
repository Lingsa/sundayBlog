---
layout: post
title: "Singleton pattern --- <<Javascript design patterns>>"
date: 2016-03-17 10:47:52 
info: 
categories: articles
---

##The Singleton Pattern

In JavaScript, Singletons serve as a shared resource namespace which isolate implementation code from the global namespace so as to provide a single point of access for functions.


{% highlight javascript %}

'var mySingleton = (function () {
 
  // Instance stores a reference to the Singleton
  var instance;
 
  function init() {
 
    // Singleton
 
    // Private methods and variables
    function privateMethod(){
        console.log( "I am private" );
    }
 
    var privateVariable = "Im also private";
 
    var privateRandomNumber = Math.random();
 
    return {
 
      // Public methods and variables
      publicMethod: function () {
        console.log( "The public can see me!" );
      },
 
      publicProperty: "I am also public",
 
      getRandomNumber: function() {
        return privateRandomNumber;
      }
 
    };
 
  };
 
  return {
 
    // Get the Singleton instance if one exists
    // or create one if it doesn't
    getInstance: function () {
 
      if ( !instance ) {
        instance = init();
      }
 
      return instance;
    }
 
  };
 
})();'

{% endhighlight %}

#=>测试示例
{% highlight %}
'var singleA = mySingleton.getInstance();
var singleB = mySingleton.getInstance();
console.log( singleA.getRandomNumber() === singleB.getRandomNumber() ); // true'

{% highlight %}

In the GoF book, the applicability of the Singleton pattern is described as follows:

>There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.
>##When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code.

[原文出处]("https://addyosmani.com/resources/essentialjsdesignpatterns/book/#singletonpatternjavascript")
