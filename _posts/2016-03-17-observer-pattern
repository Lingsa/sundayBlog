---
layout: post
title: "
date: 2016-03-17 11:11:07 
info: 
categories: articles
---

##The Observer Pattern

We can now expand on what we've learned to implement the Observer pattern with the following components:

* Subject: maintains a list of observers, facilitates adding or removing observers
* Observer: provides a update interface for objects that need to be notified of a Subject's changes of state
* ConcreteSubject: broadcasts notifications to observers on changes of state, stores the state of ConcreteObservers
* ConcreteObserver: stores a reference to the ConcreteSubject, implements an update interface for the Observer to ensure state is consistent with the Subject's

现在为Observers list建立模型：

`
function ObserverList() {
  this.observerList=[];
}
ObserverList.prototype.add=function(obj) {
  return this.observerList.push(obj);
};
ObserverList.prototype.count= function(obj) {
  return this.observerList.length;
};
ObserverList.prototype.get= function(index) {
  if(index>-1 && index< this.observerList.length) {
    return this.observerList[index];
  }
};
ObserverList.prototype.indexOf = function(obj, startIndex) {
  var i=startIndex;
  
  while( i< this.observerList.length ){
    if(this.observerList[i] === obj) {
      return i;
    }
    i++;
  }
  return -a;
};
ObserverList.prototype.removeAt = function(index) {
  this.observerList.splice(index, 1);
};
`

下面，让我们为Subject建模，使它可以对observerList 执行添加、删除、通知行为。

`
function Subject() {
  this.observers=new ObserverList();
}
Subject.prototype.addObserver = function( observer) {
  this.observers.add( obsevr );
};
Subject.prototype.removeObserver = function( observer ) {
  this.observers.removeAt(this.observers.indeOf( observer, 0));
};
Subject.prototype.notify = function( context ) {
  var observerCount=this.observers.count();
  for(var i=0; i<observerCount; i++) {
    this.observers.get(i).update( context) ;
  }
};
`
